// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String?    @unique
  password   String     @default("")
  phone      String?    @unique
  github_id  String?    @unique
  avatar     String?    @default("")
  created_at DateTime   @default(now())
  updated_ad DateTime   @updatedAt
  SMSToken   SMSToken[]
  Product    Product[]
  ChatRoom   ChatRoom[]
  Message    Message[]
  Post       Post[]
  Like       Like[]
  Comment    Comment[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  Like      Like[]
  userId    Int
  Comment   Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  postId    Int
}

model Like {
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
  userId Int
  postId Int

  @@id([postId, userId])
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      Int      @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  ChatRoom    ChatRoom[]
}

model ChatRoom {
  id        String    @id @default(cuid())
  product   Product   @relation(fields: [productId], references: [id])
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Message   Message[]
  productId Int
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  chatroom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  userId     Int
  chatRoomId String
}
